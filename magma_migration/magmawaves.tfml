<?xml version='1.0' encoding='utf-8'?>
<terraferma_options>
  <geometry>
    <dimension>
      <integer_value rank="0">2</integer_value>
    </dimension>
    <mesh name="Mesh">
      <source name="UnitSquare">
        <number_cells>
          <integer_value shape="2" dim1="2" rank="1">32 32</integer_value>
        </number_cells>
        <diagonal>
          <string_value lines="1">right/left</string_value>
        </diagonal>
        <cell>
          <string_value lines="1">triangle</string_value>
        </cell>
      </source>
    </mesh>
  </geometry>
  <io>
    <output_base_name>
      <string_value lines="1">magmawaves</string_value>
    </output_base_name>
    <visualization>
      <element name="P2DG">
        <family>
          <string_value lines="1">DG</string_value>
        </family>
        <degree>
          <integer_value rank="0">2</integer_value>
        </degree>
      </element>
    </visualization>
    <dump_periods>
      <visualization_period>
        <real_value rank="0">1.0</real_value>
      </visualization_period>
      <statistics_period>
        <real_value rank="0">.025</real_value>
      </statistics_period>
    </dump_periods>
    <detectors/>
    <checkpointing>
      <checkpoint_period>
        <real_value rank="0">1.0</real_value>
      </checkpoint_period>
    </checkpointing>
  </io>
  <timestepping>
    <current_time>
      <real_value rank="0">0.0</real_value>
    </current_time>
    <finish_time>
      <real_value rank="0">0.5</real_value>
    </finish_time>
    <timestep>
      <coefficient name="Timestep">
        <ufl_symbol name="global">
          <string_value lines="1">dt</string_value>
        </ufl_symbol>
        <type name="Constant">
          <rank name="Scalar" rank="0">
            <value name="WholeMesh">
              <constant>
                <real_value rank="0">0.</real_value>
              </constant>
            </value>
          </rank>
        </type>
      </coefficient>
      <adaptive>
        <constraint name="Courant">
          <system name="CourantNumber"/>
          <field name="CourantNumber"/>
          <requested_maximum_value>
            <real_value rank="0">0.25</real_value>
            <comment>Courant number for a c=5 wave that moves 1/2 a compaction length in one time step.</comment>
          </requested_maximum_value>
        </constraint>
        <adapt_period>
          <real_value rank="0">2.</real_value>
        </adapt_period>
        <increase_tolerance>
          <real_value rank="0">1.1</real_value>
        </increase_tolerance>
      </adaptive>
    </timestep>
  </timestepping>
  <global_parameters>
    <python>
      <string_value type="code" lines="20" language="python"># Initialize to single solitary wave profile 
# using PySolwave routines 
# This header will act as a global header to all subsequent def val instances
# (with great power comes great responsibility)

from pysolwave.tfsolitarywave import TFSolitaryWave
from glob import glob

tfmlfile = glob("magmawaves.tfml")[0]
#initialize solitary wave object from tfmlfile
tfswave = TFSolitaryWave(tfmlfile, \
                         system_name="Magma", \
                         f_name="Porosity", \
                         p_name="Pressure", \
                         c_name="c", n_name="n", \
                         m_name="m", d_name="d", \
                         N_name="N", \
                         h_squared_name="h_on_delta_squared", \
                         x0_name="x0")

# print out some info about the solitary wave 
print "Solitary Wave information:"
print "c=",tfswave.swave.c, " n =",tfswave.swave.n, " d=",tfswave.swave.d, " r_max=",tfswave.rmax

print "f=",tfswave.swave.f

import numpy as np</string_value>
    </python>
  </global_parameters>
  <system name="Magma">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">u</string_value>
    </ufl_symbol>
    <field name="Porosity">
      <ufl_symbol name="global">
        <string_value lines="1">phi</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2DG">
            <family>
              <string_value lines="1">DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <python rank="0">
              <string_value lines="20" type="code" language="python"># python function for setting initial condition
def val(x):
  global tfswave,np
  f = tfswave.eval(np.array(x))
  return f</string_value>
            </python>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
      <comment>scaled porosity f = phi/phi_0</comment>
    </field>
    <field name="Pressure">
      <ufl_symbol name="global">
        <string_value lines="1">p</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P2">
            <family>
              <string_value lines="1">CG</string_value>
            </family>
            <degree>
              <integer_value rank="0">2</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.0</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
      <comment>Compaction pressure  p = Xi Div(V)</comment>
    </field>
    <coefficient name="v">
      <ufl_symbol name="global">
        <string_value lines="1">v</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0. -5.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>background solid advection velocity</comment>
    </coefficient>
    <coefficient name="h_on_delta_squared">
      <ufl_symbol name="global">
        <string_value lines="1">h2d2</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">4096.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>(h/delta)**2...   the system size in compacition lengths (delta) squared</comment>
    </coefficient>
    <coefficient name="c">
      <ufl_symbol name="global">
        <string_value lines="1">c</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">5.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>solitary wave speed</comment>
    </coefficient>
    <coefficient name="n">
      <ufl_symbol name="global">
        <string_value lines="1">n</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">3</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>exponent n in permeability K = phi**n</comment>
    </coefficient>
    <coefficient name="m">
      <ufl_symbol name="global">
        <string_value lines="1">m</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">0.</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>bulk viscosity exponent m,  such that the viscosity zeta = eta*phi^{- m}</comment>
    </coefficient>
    <coefficient name="d">
      <ufl_symbol name="global">
        <string_value lines="1">d</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">2</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>dimension of the solitary wave (should be &lt;= dim which is the dimension of the simulation)</comment>
    </coefficient>
    <coefficient name="N">
      <ufl_symbol name="global">
        <string_value lines="1">N</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Scalar" rank="0">
          <value type="value" name="WholeMesh">
            <constant>
              <real_value rank="0">150</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>number of collocation points for sinc-collocation method solitary wave profile generator</comment>
    </coefficient>
    <coefficient name="x0">
      <ufl_symbol name="global">
        <string_value lines="1">x0</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0.5 0.5</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
      <comment>coordinate of initial peak of the solitary wave</comment>
    </coefficient>
    <coefficient name="khat">
      <ufl_symbol name="global">
        <string_value lines="1">khat</string_value>
      </ufl_symbol>
      <type name="Constant">
        <rank name="Vector" rank="1">
          <value type="value" name="WholeMesh">
            <constant name="dim">
              <real_value shape="2" dim1="dim" rank="1">0.0 1.0</real_value>
            </constant>
          </value>
        </rank>
      </type>
      <diagnostics/>
    </coefficient>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python"># outward facing facet normal
fn = FacetNormal(u.ufl_domain())

# porosity at a half-time step
phi_half = 0.5*(phi_i + phi_n)
# inverse bulk viscosity function
# (assuming isoviscous shear viscosity)
eta = 1.0
invzeta_i = (phi_i**m)/eta
invzeta_n = (phi_n**m)/eta
# permeability
K_i       = phi_i**n

# facet normal solid velocity
vn = dot(v, fn)
# rectified normal solid velocity ( = vn if vn &gt; 0, 0 otherwise)
vnout = 0.5*(vn + abs(vn))

# body integrals for porosity
bphim = phi_t*(phi_i - phi_n - 
               dt*0.5*h2d2*(p_i*invzeta_i + p_n*invzeta_n))
# body integrals for advective integrals
bphia = -dt*dot(grad(phi_t), v*phi_half) - dt*phi_t*div(v)*phi_half
# all porosity body integrals
bphi = bphim + bphia
# surface integrals over external boundaries
sphitop = dt*phi_t*vn            # set phi=1 on the top
sphibot = dt*phi_t*(vn*phi_half) # outflow at bottom
# surface integrals over interior facets
phiupwind = vnout('+')*phi_half('+') - vnout('-')*phi_half('-')
sphifacet = dt*jump(phi_t)*phiupwind
# porosity residual
Fphi =  bphi*dx + sphitop*ds(4) + sphibot*ds(3) + sphifacet*dS

# body integral for pressure
bp = inner(grad(p_t), K_i*(grad(p_i) - khat)) + \
     p_t*h2d2*invzeta_i*p_i 
# surface integral terms for fluid flux 
# force -K[grad(p) - khat].n = 1 on top boundary
sptop = p_t
# free flux BC where inner(grad(p),n)=0
spbot = p_t*inner(K_i*khat, fn)
# pressure residual
Fp = bp*dx + sptop*ds(4) + spbot*ds(3)

# total residual
F = Fphi + Fp</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F, u_i, u_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-7</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-11</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">50</integer_value>
        </max_iterations>
        <monitors>
          <residual/>
        </monitors>
        <linear_solver>
          <iterative_method name="fgmres">
            <restart>
              <integer_value rank="0">30</integer_value>
            </restart>
            <relative_error>
              <real_value rank="0">1.e-7</real_value>
            </relative_error>
            <absolute_error>
              <real_value rank="0">1.e-12</real_value>
            </absolute_error>
            <max_iterations>
              <integer_value rank="0">20</integer_value>
            </max_iterations>
            <zero_initial_guess/>
            <monitors>
              <preconditioned_residual/>
            </monitors>
          </iterative_method>
          <preconditioner name="fieldsplit">
            <composite_type name="multiplicative"/>
            <fieldsplit name="Pressure">
              <field name="Pressure"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="preonly"/>
                <preconditioner name="hypre">
                  <hypre_type name="boomeramg"/>
                </preconditioner>
              </linear_solver>
            </fieldsplit>
            <fieldsplit name="Porosity">
              <field name="Porosity"/>
              <monitors/>
              <linear_solver>
                <iterative_method name="gmres">
                  <restart>
                    <integer_value rank="0">30</integer_value>
                  </restart>
                  <relative_error>
                    <real_value rank="0">1.e-7</real_value>
                  </relative_error>
                  <max_iterations>
                    <integer_value rank="0">50</integer_value>
                  </max_iterations>
                  <zero_initial_guess/>
                  <monitors/>
                </iterative_method>
                <preconditioner name="eisenstat"/>
              </linear_solver>
            </fieldsplit>
          </preconditioner>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="in_timeloop"/>
    </nonlinear_solver>
  </system>
  <system name="CourantNumber">
    <mesh name="Mesh"/>
    <ufl_symbol name="global">
      <string_value lines="1">ucfl</string_value>
    </ufl_symbol>
    <field name="CourantNumber">
      <ufl_symbol name="global">
        <string_value lines="1">cfl</string_value>
      </ufl_symbol>
      <type name="Function">
        <rank name="Scalar" rank="0">
          <element name="P0">
            <family>
              <string_value lines="1">DG</string_value>
            </family>
            <degree>
              <integer_value rank="0">0</integer_value>
            </degree>
          </element>
          <initial_condition type="initial_condition" name="WholeMesh">
            <constant>
              <real_value rank="0">0.</real_value>
            </constant>
          </initial_condition>
        </rank>
      </type>
      <diagnostics>
        <include_in_visualization/>
        <include_in_statistics/>
      </diagnostics>
    </field>
    <nonlinear_solver name="Solver">
      <type name="SNES">
        <form name="Residual" rank="0">
          <string_value lines="20" type="code" language="python"># Finite volume style estimate of Courant number
# calculate the outward facing normal component of velocity for each facet
n = FacetNormal(cfl_e.cell())
vn = dot(v, n)
vout = 0.5*(vn + abs(vn))

# project the cell integral of the the outgoing flux from each cell
F = cfl_t*cfl_i*dx - cfl_t('+')*vout('+')*dt('+')*dS - cfl_t('-')*vout('-')*dt('-')*dS - cfl_t*vout*dt*ds(1) - cfl_t*vout*dt*ds(2) - cfl_t*vout*dt*ds(3) - cfl_t*vout*dt*ds(4)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">F</string_value>
          </ufl_symbol>
        </form>
        <form name="Jacobian" rank="1">
          <string_value lines="20" type="code" language="python">J = derivative(F,ucfl_i,ucfl_a)</string_value>
          <ufl_symbol name="solver">
            <string_value lines="1">J</string_value>
          </ufl_symbol>
        </form>
        <quadrature_rule name="default"/>
        <snes_type name="ls">
          <ls_type name="cubic"/>
          <convergence_test name="default"/>
        </snes_type>
        <relative_error>
          <real_value rank="0">1.e-6</real_value>
        </relative_error>
        <absolute_error>
          <real_value rank="0">1.e-10</real_value>
        </absolute_error>
        <max_iterations>
          <integer_value rank="0">1</integer_value>
        </max_iterations>
        <monitors/>
        <linear_solver>
          <iterative_method name="preonly"/>
          <preconditioner name="jacobi"/>
        </linear_solver>
        <never_ignore_solver_failures/>
      </type>
      <solve name="with_diagnostics"/>
    </nonlinear_solver>
  </system>
</terraferma_options>
